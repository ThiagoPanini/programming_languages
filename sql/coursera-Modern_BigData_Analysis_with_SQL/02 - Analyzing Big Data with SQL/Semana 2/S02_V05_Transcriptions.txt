In this video, I'll
show you how to control the names of
the columns in result sets. So as you've been running
select statements in Hue, or perhaps in Beeline
or Impala shell, you've probably seen that results set has
a header at the top, giving the names of
the columns in the result set. When the select list contains
only column references, like in this example, then the result set column
names are unsurprisingly just the same column names
you used in the select list. But if you include literal
values in the select list, those don't have names. They're just literal values. So the SQL engine makes up names for
the resulting columns. For example, in
the Impala Query Editor, if I add a third item
to this select list, which is just the
literal number five, I'll add it between
name and list price, and I execute the query, the name of the resulting
column is five. So Impala names
literal value columns using the literal value itself. Now I will also modify
the select list to change the column
reference list price into an expression, list price plus five. When I execute this query, now the name of the third
column in the results set is listed price plus five. Impala names the columns
generated by an expression using
the expression. The behavior of Hive
though is different. I'll copy this select statement, and go to the Hive Query Editor. I'll paste the statement here, and make sure the current
database is fun and execute it. Hive gives names to unnamed
columns in a different way. It names them _c, then a number indicating
which column it is. The leftmost column is zero, the next one is one and so on. The two unnamed columns in this statement are the second
and third from the left. So they're numbered one and two. If I reorder the select list, to put the literal value five first before the name column, then I re-run this statement, now this column
containing the five's is the leftmost column
so it's named _c0. So that's how Impala and Hive name the unnamed columns
in a result set. Some other SQL engines
do it other ways, and the exact naming
behavior for Hive and Impala also might vary if you're using some
different client instead of Hue or Beeline
or Impala shell. Fortunately, there is a way to control the names of
the columns in a result set. You can do this in a select statement by
using Column Aliases. I'll return to
the Impala Query Editor, and recall the previous query
from the Query History. After the literal value
five in the select list, I'll add space AS
space shipping_fee. After the expression
list price plus five, I'll add space AS
space price_with_shipping, and I'll execute the query. Now, the names of the columns
in the results set are these names I specified
in the select list. These names are called
column aliases. You can also use column aliases
with column references. The first column here name, already has a name, but I can use
a column alias to give it a different name
in the results set. In the select list after name, I'll add space AS
space game_name. Then, after I execute the query, the first column in the result
set is named game name. With most SQL engines, the AS keyword before
a column alias is optional. So I can remove the AS before each alias and execute the query again and it succeeds and
gives the same result. But using the AS keyword helps make select statements
more easily readable. So I will typically
include the AS keyword before column aliases
throughout this course. There are some rules
about what you can use as a column alias. I'll explain that in detail
later in the course. But for now, you can just
remember a few simple rules. You should use only letters, digits, and underscores
in column aliases. You should not use only digits. Also, you should not
use words that have special meaning in
SQL as the aliases. For instance, you
should not use the word select as a column alias. You'll learn some more details about this in a later lesson.