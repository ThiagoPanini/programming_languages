Another type of system, midway between NoSQL and full RDBMS systems, would be a Non-transactional system, for structured tables. Kudu is such a system, it allows you to create tables, much like relational database tables using column definitions and common data types, like the ones you see in relational tables. Kudu can enforce primary key constraints, but not foreign Key constraints. You can perform atomic inserts, updates and deletes, on individual rows with high performance. However, Kudu does not at this time support multi-row, acid compliant transactions. By design, Kudu provides a compromise in performance between the large-scale analytic databases and the large-scale NoSQL operational databases. Look at this chart, as you can see from this diagram, if you want the best performance for your large data warehouse, you will use tools built especially for this use, like Impala and Hive. You will focus on good data models and file storage to optimize for big analytic queries. On the other hand, if you want lightning fast CRUD operations at large scale, you will need a great operational system like HBase. But each of these two approaches is great at one thing, operational or analytic work and weak at the other thing. Kudu, while not the best at either thing, is good at both things. When the features and performance of Kudu meet your needs, then it simplifies your work to combine the different uses in one tool. Note that Impala is integrated with Kudu so, all the analytic Impala SQL select statements you will learn over the rest of this specialization will work unchanged with data stored in Kudu. I want to emphasize that Kudu provides tables, a SQL interface through Impala and atomic single row DML statements. But it stops short of full, multi-row, acid compliant transactions. In the Frequently Asked Questions, on the Apache Kudu website, you will find the statement that, Kudu is designed to eventually be fully ACID-compliant. But this is not the case, as I'm speaking.