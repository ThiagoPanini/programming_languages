Another category of operational systems are those that do not mandate a schema on your records. These include key value stores like Apache HBase and Apache Cassandra and document stores like MongoDB and Couchbase. These systems vary in the form of data you store. Binary arrays in HBase, various data types in Cassandra and JSON like structures in MongoDB and Couchbase. These all belong to the category of NoSQL databases and their support for SQL is usually weak or non-existent. An important feature of these systems is that they provide simple DML and query commands and they physically organize records by a specific lookup key. Records can be stored in massive numbers and then a record can be found rapidly by its lookup key, but not easily by other values in the record. This is in marked contrast to the general approach you find with relational databases, where for example, you can easily find sales receipts by price, or by date, or by product, or store ID. To understand better the implications of organization by key, imagine that you must keep paper files for patients in a doctor's office over a period of years. Suppose, you alphabetize your files by patient name, then you can quickly find the file for any patient, then you can add new files in their proper place without delay. But, if you want to find all the patients with some particular symptom, you would have a tough time of it, since their records are not organized that way. You might create a cross index by symptom, but this would require ongoing effort to maintain and even with the index, the files for any one symptom are scattered across the file set adding to your work even just to retrieve what you want. But notice, that if you can make a commitment that you will always look up files by the client name and no other way, then your simple alphabetized organization can keep things very simple and efficient for you. Similarly, NoSQL databases perform well when you have only a few carefully defined patterns for how you want to access records in your data. They can keep data organized to support key lookups at phenomenal scale. Take for example, the case of an operational database for a social chat application. This app has very clear and narrowly defined access patterns, write a message for a user, broadcast messages to followers. You can have well over a million database operations per second and an even mix of reads and writes. In exchange for this kind of performance, your operational database gives up the flexibility of multiple uses. In fact, you give up the relational approach and SQL altogether. As for the non table structure of data, some developers, especially those unfamiliar with SQL, find the JSON like records of document stores, like MongoDB, to be intuitive, which contributes to their popularity.